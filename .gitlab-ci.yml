stages:
  - build
  - test


test_and_build:
  tags: 
    - gitlab-org-docker
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
      alias: app
  before_script:
    - docker network create mynetwork
    - docker-compose build
    - docker-compose up --detach 
    - docker ps 
    - docker network connect mynetwork app-mongo-1
    - docker network connect mynetwork app-web-1
    - docker network inspect mynetwork
  script:
    - docker run -d -i -t --network=mynetwork --name OWASPZAP -v $(pwd):/zap/wrk/:rw owasp/zap2docker-stable
    - docker ps
    # kopiowanie pliku z odpowiedniego folderu w repo do folderu w OWASPZAP docker
    - docker cp OWASPZAP_scanns/normal_scann_no_fail_on_warning.yaml OWASPZAP:/zap/normal_scann_no_fail_on_warning.yaml 
    # wywo≈Çanie odpowiedniego testu
    - docker exec -i OWASPZAP zap.sh -cmd -autorun /zap/normal_scann_no_fail_on_warning.yaml
    #- docker exec -i OWASPZAP zap-baseline.py -t http://app-web-1:4000 -r  baseline-report.html
    - docker exec OWASPZAP sh -c ls
    - docker exec -i OWASPZAP pwd
    - docker cp OWASPZAP:/zap/ZAP_REPORT.html .
    - docker cp OWASPZAP:/zap/ZAP_ALERT_REPORT.md .
  after_script:
    - docker ps
    - docker exec OWASPZAP sh -c ls
    - docker exec -i OWASPZAP pwd
    - docker-compose down
  artifacts:
    paths:
      - ZAP_REPORT.html
      - ZAP_ALERT_REPORT.md


    
zap-automation-baseline-scan 2/2:
  tags: 
    - gitlab-org-docker
  image:
    name: owasp/zap2docker-stable:latest
    entrypoint: [""]
  services: 
    - docker:dind
  stage: test
  variables:
    CI_PROJECT_DIR: /builds/filip.st1357/test
    ZAP_ALERT_REPORT: alert-report
    ZAP_REPORT: baselinescan
    DOCKER_HOST: tcp://docker:2375/
  script:
    - hostname -I # Returns the IP address of the machine
    - bash zap_automation_baseline_scan.sh
  only:
    refs:
    - branches
  artifacts:
    when: always
    expire_in: 1 month
    paths:
      - ${CI_PROJECT_DIR}/${ZAP_REPORT}.html
      - ${CI_PROJECT_DIR}/${ZAP_ALERT_REPORT}.md



